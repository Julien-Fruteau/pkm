{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"## Welcome to the knowledge management website\n\nLast updated:\n- version: v0.83\n","n":0.316}}},{"i":2,"$":{"0":{"v":"Python","n":1},"1":{"v":"\n\nPython related topics.\n\n[[python.web]]\n[[python.pytest]]\n","n":0.577}}},{"i":3,"$":{"0":{"v":"Web","n":1},"1":{"v":"\n## API Request Limit\n\nContext : #[python]() #[api]() #[rate-limit]() #[aiohttp]() #[asyncio]() #[asyncio_throttle]()\n\nA usage example of the ```asyncio_throttle``` module that can be useful to overcome api rate limit\n\n```python\nimport asyncio\nimport time\nfrom asyncio_throttle.throttler import Throttler\n\n\nasync def wait_s(i: int, throttler: Throttler):\n    async with throttler:\n        # ! make an http request here instead :) !\n        await asyncio.sleep(1)\n        print(f\"{time.time()} : {i} done\")\n\nasync def tasks(throttler: Throttler):\n    t = [asyncio.create_task(wait_s(i, throttler)) for i in range(200)]\n    await asyncio.wait(t, timeout=None, return_when=asyncio.ALL_COMPLETED)\n\nasync def main():\n    # for a rate limit of 5 requests / sec :\n    t = Throttler(rate_limit=5, period=1)\n    await tasks(t)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main()) \n```\n","n":0.103}}},{"i":4,"$":{"0":{"v":"Pytest","n":1},"1":{"v":"\n## pytest-mock\n\nContext : #[python]() #[test]() #[pytest]() #[mock]() #[pytest-mock]()\n\nA usage example of the ```pytest_mock``` module\n\n### Mock object method\n\n```python\nfrom pytest_mock import MockerFixture\n\nclass A:\n    def echo(self, text: str):\n        fmt_text = text.upper()\n        return fmt_text\n\n\ndef test_foo(mocker: MockerFixture):\n    a = A()\n    mocker.patch.object(a, 'echo', return_value=\"MOCKED\", autospec=True)\n    assert a.echo(\"hello\") == \"MOCKED\"\n\n\ndef test_foo_no_mock():\n    a = A()\n    assert a.echo(\"hello\") == \"HELLO\"\n```\n\n### Mock module function\n\n- my_package.my_module file :\n\n```python\ndef my_function_to_mock(text: str):\n    return text.capitalize()\n\ndef function_using_function_to_mock(text: str):\n    use: str = my_function_to_mock(text)\n    return use + \" Function\"\n```\n\n- testing :\n\n```python\nfrom pytest_mock import MockerFixture\nfrom my_package.my_module import function_using_function_to_mock\n\ndef test_function_using_function_to_mock(mocker: MockerFixture):\n    mocker.patch(\"my_package.my_module.my_function_to_mock\", return_value=\"MOCKED\")\n    actual = function_using_function_to_mock(\"hello\")\n    assert actual == \"MOCKED Function\"\n\ndef test_function_without_mocking(mocker: MockerFixture):\n    actual = function_using_function_to_mock(\"hello\")\n    assert actual == \"Hello Function\"\n\n```\n","n":0.099}}}]}
